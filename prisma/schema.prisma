generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model roles {
  id                         Int     @id @default(autoincrement())
  name                       String  @unique @db.VarChar(50)
  users_users_role_idToroles users[] @relation("users_role_idToroles")
}

model status {
  id       Int        @id @default(autoincrement())
  nome     String     @db.VarChar(255)
  leilao   leilao[]   @relation("leilao_status")
  produtos produtos[] @relation("produto_status_produtos_idTproduto")
}

model users {
  role_id                    Int?
  username                   String @id @db.VarChar(50)
  name                       String @db.VarChar(100)
  password                   String @db.VarChar(255)
  roles_users_role_idToroles roles? @relation("users_role_idToroles", fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_role")

  // Relação com a tabela de lances
  laces_lances_usename lances[] @relation("lances_users_username_lances")

  // Relação com a tabela de leilões
  leilao_users_username leilao[] @relation("leilao_users_username")

  //Relação com a tabela de saldo
  saldo saldo?
}

model leilao {
  id                 Int    @id @default(autoincrement())
  lance_inicial      Int    @db.Integer
  data_inicial       String @db.VarChar(255)
  matricula_arremate String @db.VarChar(50)
  ultimo_lance       Int    @db.Integer
  data_final         String @db.VarChar(255)
  leilao_status      Int    @db.Integer

  // Relação com a tabela de usuários
  users_username users? @relation("leilao_users_username", fields: [matricula_arremate], references: [username], onDelete: NoAction, onUpdate: NoAction, map: "fk_leilao_users")

  // Relação com a tabela de status
  leilao_id_status status @relation("leilao_status", fields: [leilao_status], references: [id], map: "fk_leilao_status")

  // Muitos-para-muitos com produtos
  produtos   produtos @relation("LeilaoProdutos", fields: [produtosId], references: [id])
  produtosId Int

  // Relação com a tabela de lances
  lances_lances_leilao lances[] @relation("lances_lances_leilao")
}

model produtos {
  id             Int    @id @default(autoincrement())
  nome           String @db.VarChar(255)
  valor          Int    @db.Integer
  descricao     String @db.VarChar(255)
  produto_status Int    @db.Integer
  estoque        Int    @db.Integer
  produto_imagem String @db.VarChar(255)
  categoria      String @db.VarChar(255)
  // Relação com status do produto
  produto_status_produtos_idTproduto status @relation("produto_status_produtos_idTproduto", fields: [produto_status], references: [id], map: "fk_produto_status")

  // Muitos-para-muitos com leilões
  leiloes leilao[] @relation("LeilaoProdutos")
}

model lances {
  id       Int    @id @default(autoincrement())
  valor    Int    @db.Integer
  Dh_Lance String @db.VarChar(255)

  laces_lances_usename users  @relation("lances_users_username_lances", fields: [username], references: [username], onDelete: NoAction, onUpdate: NoAction, map: "fk_lances_users")
  username             String

  // Relação com leilão
  lances_lances_leilao leilao @relation("lances_lances_leilao", fields: [lances_id_leilao], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_lances_leilao")
  lances_id_leilao     Int
}

model saldo {
  id    Int    @id @default(autoincrement())
  valor Int    @db.Integer
  user  String @unique

  // Relação com usuário
  users users @relation(fields: [user], references: [username])
}

// 15,65,42,28,36
